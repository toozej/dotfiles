# General functions
# from https://stackoverflow.com/a/58598185
# capture the output of a command so it can be retrieved with ret
cap () { tee /tmp/capture.out; }

# return the output of the most recent command that was captured by cap
ret () { cat /tmp/capture.out; }

# copy contents and paths of $1 filetypes to paste to gist/chat/etc.
function pbbc() {
    find_file_type="${1}"
    exclude="${2}"

    os=$(uname -s)
    if [[ $os == "Linux" ]]; then
        copier="wl-copy"
    elif [[ $os == "Darwin" ]]; then
        copier="pbcopy"
    fi
    
    if [[ "x${exclude}" == "x" ]]; then
        find . -type f -name "*${find_file_type}" -exec bash -c 'if ! git check-ignore -q "{}"; then echo -e "{}\n\"\"\"" && cat "{}" && echo -e "\"\"\"\n"; fi' \; | "${copier}"
    else
        find . -type f -name "*${find_file_type}" -not -name "*${exclude}*" -exec bash -c 'if ! git check-ignore -q "{}"; then echo -e "{}\n\"\"\"" && cat "{}" && echo -e "\"\"\"\n"; fi' \; | "${copier}"
    fi
}

# Git and Github functions
# determining default branch using https://stackoverflow.com/questions/28666357/git-how-to-get-default-branch/44750379#comment92366240_50056710

function dbr(){
    git remote show origin | grep "HEAD branch" | sed 's/.*: //'
}

function br(){
    branch_name=$1
    current_branch=`git rev-parse --abbrev-ref HEAD`
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    if [ $branch_name ]; then
        if [ $current_branch != $default_branch ]; then
            git checkout $default_branch
        fi
        git pull
        git branch $branch_name
        git checkout $branch_name
    else
        echo "No branch name specified, aborting"
    fi
}

function gdf() {
	filename=$1
    comparison_branch=$2
    current_branch=`git rev-parse --abbrev-ref HEAD`
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    if [ $filename ]; then
        if [ $comparison_branch ]; then
            git diff $current_branch..$comparison_branch -- $filename
        else
            git diff $current_branch..$default_branch -- $filename
        fi
    else
        if [ $comparison_branch ]; then
            git diff $current_branch..$comparison_branch
        else
            git diff $current_branch..$default_branch
        fi
    fi
}

function push() {
    branch=`git rev-parse --abbrev-ref HEAD`
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    if [[ $branch == $default_branch ]]; then
        echo -e "DO NOT PUSH TO $default_branch"
    else
        git push -u origin $branch
    fi
}

function pushf() {
    branch=`git rev-parse --abbrev-ref HEAD`
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    if [[ $branch == $default_branch ]]; then
        echo -e "DO NOT PUSH TO $default_branch"
    else
        git push -u -f origin $branch
    fi
}

function gwip() {
    branch=`git rev-parse --abbrev-ref HEAD`
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    if [[ $branch == $default_branch ]]; then
        # create new WIP branch
        git branch WIP
        git checkout WIP
    fi
    git add --all
    message=`git log -1 --pretty=%B | head -n 1`
    if [[ ${message} == "WIP" ]]; then
        git commit -a -m 'WIP' --amend --no-edit --no-verify
    else
        git commit -a -m 'WIP' --no-verify
    fi
    pushf
}

function pr(){
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    remote=`git remote -v | grep origin | head -1 | awk '{ print $2 }' | sed 's/.*:\(.*\)*/\1/' | sed 's/\.git$//'`
    branch=`git rev-parse --abbrev-ref HEAD`
    os=`uname -s`
    if [[ $os == "Linux" ]]; then
        opener=xdg-open
    elif [[ $os == "Darwin" ]]; then
        opener=open
    fi
    $opener "https://github.com/$remote/compare/${1:-$default_branch}...$branch?expand=1"
}

function cci(){
    remote=`git remote -v | grep origin | head -1 | awk '{ print $2 }' | sed 's/.*:\(.*\)*/\1/' | sed 's/\.git$//'`
    branch=`git rev-parse --abbrev-ref HEAD`
    os=`uname -s`
    if [[ $os == "Linux" ]]; then
        opener=xdg-open
    elif [[ $os == "Darwin" ]]; then
        opener=open
    fi
    $opener "https://app.circleci.com/pipelines/github/${remote}?branch=${branch}&filter=all"

}

function gpa() {
    for DIR in $(ls .); do cd ${DIR} && git pull && cd ../; done
}

function gcmp(){
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    git checkout $default_branch && git pull
}

function gcmpa(){
    starting_path=`pwd`
    for DIR in $(find $starting_path -mindepth 2 -type d -name ".git"); do
        cd ${DIR}/..
        current_branch=`git rev-parse --abbrev-ref HEAD`
        default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
        if [ $current_branch == $default_branch ]; then
            git checkout $default_branch && git pull
        else
            echo "skipping $DIR since default branch not currently checked out"
        fi 
        cd $starting_path
    done
}

function gr(){
    mr register
}

function gra(){
    find . -mindepth 1 -maxdepth 1 -type d -exec mr register {} \;
}

function rebase(){
    branch_name=$1
    default_branch=`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`
    if [ -z $branch_name ]; then
        branch_name=$default_branch
    fi
    current_branch=`git rev-parse --abbrev-ref HEAD`
    git checkout $branch_name
    git pull
    git checkout $current_branch
    git rebase -i $branch_name
    git push --force
}

# clone all repos from github.com/toozej into cwd and register them with myrepos
function githubclonetoozej() {
    if [ -n "${1}" ]; then
        GITHUB_CLONE_TOOZEJ_TOKEN="${1}"
    fi
    curl -s https://${GITHUB_CLONE_TOOZEJ_TOKEN}:@api.github.com/users/toozej/repos\?per_page\=200 | jq -r '.[] | select(.archived == false)' | jq ".ssh_url" | xargs -n 1 git clone --recursive
    find . -mindepth 1 -maxdepth 1 -type d -exec mr register {} \;
}

# git-peak-extended
function gp() { EDITOR='code -n -w -a' $HOME/bin/git-peak-extended --temp $@; }
function gpv() { EDITOR=vim $HOME/bin/git-peak-extended --temp $@; }
function gppc() { EDITOR=pycharm $HOME/bin/git-peak-extended --temp $@; }
function gpb() { EDITOR='code -n -w -a' $HOME/bin/git-peak-extended --temp --branch $@; }
function gpvb() { EDITOR=vim $HOME/bin/git-peak-extended --temp --branch $@; }
function gppcb() { EDITOR=pycharm $HOME/bin/git-peak-extended --temp --branch $@; }
function gps() { EDITOR=vim $HOME/bin/git-peak-extended --mr --save $@ && cd $(cat /tmp/git-peak-extended.tmp); }
function gpsc() { EDITOR='code -n -w -a' $HOME/bin/git-peak-extended --mr --save $@; }
function gpspc() { EDITOR=pycharm $HOME/bin/git-peak-extended --mr --save $@; }

# quick Python virtualenv
function venv() {
    if [ -n "${2}" ]; then
        export REQUIREMENTS_FILE="${2}"
    else
        export REQUIREMENTS_FILE="requirements.txt"
    fi
    if [ -n "${1}" ]; then
        export TEMP_VENV="${1}"
    else
        export TEMP_VENV=$(mktemp -d)
        if [ -f ${REQUIREMENTS_FILE} ]; then
            cp ${REQUIREMENTS_FILE} ${TEMP_VENV}/${REQUIREMENTS_FILE}
        fi
    fi
    python3 -m venv ${TEMP_VENV}
    source ${TEMP_VENV}/bin/activate
    if [ -f ${REQUIREMENTS_FILE} ]; then
        pip3 install -r ${REQUIREMENTS_FILE}
    elif [ -f ${TEMP_VENV}/${REQUIREMENTS_FILE} ]; then
        pip3 install -r ${TEMP_VENV}/${REQUIREMENTS_FILE}
    fi
    python3
}

# misc functions
sssh() {
    ssh -t $1 "screen -dR"
}

function journal() {
    cd ~/journal
    if [[ -n ${1} ]]; then
        ./journal ${1}
    else
        ./journal
    fi
    cd -
}

# create archives out of folders
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

#extract archives
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# rough attempt at saving some disk space with large files which aren't used frequently, like .isos
# recursively find all files ending in ".$2" at the $1 path, and compress them using 7z ultra settings.
# if compression works successfully, delete the original file
function compressfiletype() {
    if [[ "$1" =~ ^(-h|--help)$ ]]; then
        echo "example: compressfiletype ~/Software/ .iso"
        exit 1
    fi
    find "$1" -name "*$2" -exec 7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on {}.7z {} \; -exec 7za t {}.7z \; -exec rm -rf {} \;
}

# recursively find all files ending in ".$2" at the $1 path, and uncompress them using 7z.
# TODO need to figure out how to extract to the original folder path it was in
# if decompression works successfully, delete the original file
function uncompressfiletype() {
    if [[ "$1" =~ ^(-h|--help)$ ]]; then
        echo "example: uncompressfiletype ~/Software/ .7z"
        exit 1
    fi
    for f in $(find "${1}" -name "*${2}"); do
        DIR=$(dirname ${f})
        7z e ${f} -o${DIR}/*
        if [ $? -ne 0 ]; then
            echo -e "Failed extracting ${f}\n"
        else
            rm -f ${f}
            echo -e "Successfully extracted ${f}\n"
        fi
    done
}

# make an encrypted tgz from $1
function mkenctar() {
    FAILED=""
    tar -czf ${1}.tgz ${1}
    if [ $? -ne 0 ]; then
        FAILED="${FAILED} tarring ${1}\n"
    fi

    gpg --batch --yes --homedir /home/james/.gnupg --trust-model always --output ${1}.tgz.gpg --encrypt --recipient "james@toozej.com" ${1}.tgz
    if [ $? -eq 0 ]; then
        echo "encrypting ${1} completed successfully, removing unencrypted tar file ${1}.tgz"
        shred ${1}.tgz && rm -f ${1}.tgz
        if [ $? -ne 0 ]; then
            FAILED="${FAILED} destroying ${1}.tgz, you should delete it manually.\n"
        fi
    else
        FAILED="${FAILED} error encrypting ${1}.tgz\n"
    fi

    echo ${FAILED}
}

# check if terminal supports 24-bit true colors
# https://gist.github.com/XVilka/8346728
truecolor() {
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}

function cheat() {
    curl -s "https://cheat.sh/$*" | \less -riX
}

function alertme() {
    pid=$1
    if ! [[ "$pid" =~ ^[0-9]+$ ]]; then
        echo "\$1 must be the pid of the process you want to alert on completion"
        exit 1
    fi
    echo "alerting via echo and system bell when $pid has exited"
    (while kill -0 $pid; do sleep 1; done) && tput bel && echo "command completed"
}

function pingme() {
    curl --silent --output /dev/null -X POST --data-urlencode \
    'payload={"channel":"@toozej", "username":"PingBot", "text":"Your thing is done!", "icon_emoji":":poop:"}' \
    https://hooks.slack.com/services/somelongurlgoeshere
}

function updoot() {
    if command -v apt &> /dev/null; then
        sudo apt-get update -qq
        sudo apt-get upgrade -y
        sudo apt-get autoremove -y
    elif command -v dnf &> /dev/null; then
        sudo dnf upgrade -y
    fi

    if command -v flatpak &> /dev/null; then
        sudo flatpak upgrade -y
    fi
}

# Test Kitchen
function kc() {
    if [ -z ${1} ]; then
        DISTROS="all"
    else
        DISTROS="${1}"
    fi

    kitchen converge ${DISTROS}
}

function kcc() {
    if [ -z ${1} ]; then
        DISTROS="all"
    else
        DISTROS="${1}"
    fi

    kitchen destroy all -c
    kitchen create ${DISTROS} -c && kitchen converge ${DISTROS}
}

function kccd() {
    if [ -z ${1} ]; then
        DISTROS="all"
    else
        DISTROS="${1}"
    fi

    kitchen destroy all -c
    kitchen create ${DISTROS} -c && kitchen converge ${DISTROS}
    kitchen destroy all -c
}

function kda() {
    kitchen destroy all -c
}
